- name: Copy Virtual Disk file(s)
  command: cp -f {{ libvirt_manager_ref_qcow_disk_file }} {{ qcow_disk_file }}
  when: libvirt_manager_create == 'true'

- name: Define and create VM(s)
  virt:
    name: create vm
    command: define
    xml: "{{ lookup('template', 'vm_template.xml.j2') }}"
    uri: "{{ uri }}"
  when: libvirt_manager_create == 'true'

#- pause:
#    seconds: 5
#  when: libvirt_manager_create == 'true'

# Power on the Virtual Machine(s)
- name: Start VM(s)
  virt:
    name: "{{ name }}"
    state: running
    uri: "{{ uri }}"
  when: libvirt_manager_create == 'true'

#- pause:
#    seconds: 5
#  when: libvirt_manager_create == 'true'


- name: Obtain IP MAC
  shell: virsh domiflist {{ name }} | grep --only-matching --extended-regexp "([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"
  register: ip_mac
  when: libvirt_manager_create == 'true'

- name: Obtain IP Address
  shell: arp -n | grep  {{ip_mac.stdout}} | awk '{print $1}'
  register: ip_address
  when: libvirt_manager_create == 'true'


# Get current status of VMs
- name: Get current status
  virt:
    name: "{{ name }}"
    command: status
    uri: "{{ uri }}"
  ignore_errors: yes
  register: vm_status
  when: libvirt_manager_create == 'true'

#- pause:
#    seconds: 60
#  when: libvirt_manager_create == 'true'


### Undefine VM(s)
- name: Undefine VM(s)
  virt:
    name: "{{ name }}"
    command: undefine
    uri: "{{ uri }}"
  ignore_errors: yes
  when: libvirt_manager_delete

- name: Remove Virtual Disk file(s)
  file:
    path: "{{ qcow_disk_file }}"
    state: absent
  when: libvirt_manager_delete == 'true'
